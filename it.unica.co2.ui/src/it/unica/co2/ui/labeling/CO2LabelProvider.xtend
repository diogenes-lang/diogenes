/*
 * generated by Xtext
 */
package it.unica.co2.ui.labeling

import com.google.inject.Inject
import it.unica.co2.co2.DelimitedProcess
import it.unica.co2.co2.DoInput
import it.unica.co2.co2.DoOutput
import it.unica.co2.co2.FreeName
import it.unica.co2.co2.IfThenElse
import it.unica.co2.co2.ParallelProcesses
import it.unica.co2.co2.ProcessCall
import it.unica.co2.co2.ProcessDefinition
import it.unica.co2.co2.Sum
import it.unica.co2.co2.Tau
import it.unica.co2.co2.Tell
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class CO2LabelProvider extends ContractsLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def image(ProcessDefinition ele) {
		'process.png'
	}
	
	
	
	def String text(ProcessDefinition ele) {
		var name = ele.name?: '<anonymous>'
		if (ele.params.length!=0)
			'''«name» «ele.params.join("(", ",", ")", [x|x.name])»'''
		else
			name
	}
	
	def text(DelimitedProcess ele) {
		ele.freeNames.join(" ", [ FreeName x | "("+x.name+")"])
	}
	
	def text(Sum ele) {
		"+"
	}
	
	def text(ParallelProcesses ele) {
		"|"
	}
	
	def text(Tell ele) {
		if (ele.contractReference!=null)
			"tell " + ele.session + " [" + ele.contractReference.name + "]"
		else
			"tell " + ele.session
	}
	
	def text(DoInput ele) {
		"do "+ ele.session + " " + ele.actionName + "?"
	}
	
	def text(DoOutput ele) {
		"do "+ ele.session + " " + ele.actionName + "!"
	}
	
	def text(Tau ele) {
		"\u03c4"
	}
	
	def text(IfThenElse ele) {
		"ifThenElse"
	}
		
	def String text(ProcessCall ele) {
		var name = ele.reference.name?: '<anonymous>'
		if (ele.params.length!=0)
			'''«name» «ele.params.join("(", ",", ")", [x|x.toString])»'''
		else
			name
	}
}