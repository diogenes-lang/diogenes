in co2-abs .


*******************************************************************************
*** Tests for CO2 abstract syntax/semantics
*******************************************************************************


mod TEST1 is
    including CO2-ABS-SEM .

    ops a b : -> ActName [ctor] .
    ops string bool int unit : -> BType [ctor] .
    ops C : -> UniContract .

    eq C = a ! unit . 0 (+) b ! unit . 0 .

    op P : -> Process .
    op x : -> SessionVariable .
    op e : -> Expression .
    op X : -> ProcIde .

    eq P = (x) (tell x C . do x a ! unit . 0) .
    
    ***eq env = () .

endm


mod TEST2 is
    including CO2-ABS-SEM .

    ops a b : -> ActName [ctor] .
    ops string bool int unit : -> BType [ctor] .
    ops C : -> UniContract .

    eq C = a ! unit . 0 .

    op P : -> Process .
    op x : -> SessionVariable .
    op e : -> Expression .
    op X : -> ProcIde .

    eq P = (x) (tell x C . ( t . do x a ! unit . 0 + t . do x b ! unit . 0 ) ) .
    
    ***eq env = () .

endm


mod TEST3 is
    including CO2-ABS-SEM .

    ops a b : -> ActName [ctor] .
    ops string bool int unit : -> BType [ctor] .
    ops C : -> UniContract .

    eq C = a ? unit . 0 + b ? unit . 0 .

    op P : -> Process .
    op x : -> SessionVariable .
    op e : -> Expression .
    op X : -> ProcIde .

    eq P = (x) (tell x C . do x a ? unit . 0 ) .
    *** eq P = (x) (tell x C . ( do x a ? unit . 0 + do x b ? unit . 0 ) ) .
    
    ***eq env = () .


endm


mod TEST4 is
    including CO2-ABS-SEM .

    ops a b : -> ActName [ctor] .
    ops string bool int unit : -> BType [ctor] .
    ops C : -> UniContract .

    eq C = a ! unit . 0 .

    op P : -> Process .
    op x : -> SessionVariable .
    op e : -> Expression .
    op X : -> ProcIde .

    eq P = (x) (tell x C . X(x)) .
    
    eq env = (
	  X(x) =def t . do x a ! unit . 0 + t . X(x)
	) .

endm


mod TEST5 is
    including CO2-ABS-SEM .

    ops a b c : -> ActName [ctor] .
    ops string bool int unit : -> BType [ctor] .
    ops C D : -> UniContract .

    eq C = a ? unit . c ! unit . 0 .
    eq D = b ! unit . 0 .

    op P : -> Process .
    ops x y : -> SessionVariable .
    op e : -> Expression .
    op X : -> ProcIde .

    eq P = (x) (tell x C . do x a ? unit . ((y) tell y D . do y b ! unit . do x c ! unit . 0 ) ) .
    
    ***eq env = () .


endm

mod TEST6 is
    including CO2-ABS-SEM .

    ops a b : -> ActName [ctor] .
    ops string bool int unit : -> BType [ctor] .
    ops C : -> UniContract .

    eq C = a ! unit . 0 .

    op P : -> Process .
    op x : -> SessionVariable .
    op e : -> Expression .
    op X : -> ProcIde .

    eq P = (x) (tell x C . X(x)) .
    
    eq env = (
	  X(x) =def if e then do x a ! unit . 0 else t . X(x)
	) .

endm


***red in TEST1 : honest(P, ['TEST1], 10) .
***red in TEST2 : honest(P, ['TEST2], 10) .
***red in TEST3 : honest(P, ['TEST3], 10) .
***red in TEST4 : honest(P, ['TEST4], 10) .
red in TEST5 : honest(P, ['TEST5], 10) .
***red in TEST6 : honest(P, ['TEST6], 10) .

mod TEST7 is
    including CO2-ABS-SEM .

    ops a b c : -> ActName [ctor] .
    ops string bool int unit : -> BType [ctor] .
    ops C : -> UniContract .

    eq C = a ! unit . 0 (+) b ! unit . 0 .

    op P : -> Process .
    op x : -> SessionVariable .
    op e : -> Expression .
    op X : -> ProcIde .

    eq P = (x) (tell x C . do x c ! unit . 0  + do x b ! unit . 0  ).
        
    ***eq env = () .

endm

***red in TEST7 : honest(P, ['TEST7], 10) .