/*
 * generated by Xtext
 */
package it.unica.co2.formatting2;

import com.google.inject.Inject;
import it.unica.co2.co2.AbstractNextProcess;
import it.unica.co2.co2.CO2System;
import it.unica.co2.co2.DelimitedProcess;
import it.unica.co2.co2.DoInput;
import it.unica.co2.co2.DoOutput;
import it.unica.co2.co2.ElseStatement;
import it.unica.co2.co2.IfThenElse;
import it.unica.co2.co2.ParallelProcesses;
import it.unica.co2.co2.Prefix;
import it.unica.co2.co2.ProcessDefinition;
import it.unica.co2.co2.Sum;
import it.unica.co2.co2.Tau;
import it.unica.co2.co2.Tell;
import it.unica.co2.co2.ThenStatement;
import it.unica.co2.contracts.ContractDefinition;
import it.unica.co2.formatting2.ContractsFormatter;
import it.unica.co2.services.CO2GrammarAccess;
import org.eclipse.xtext.formatting2.IFormattableDocument;

class CO2Formatter extends ContractsFormatter {
	
	@Inject extension CO2GrammarAccess

	def dispatch void format(CO2System co2system, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ContractDefinition contracts : co2system.getContracts()) {
			format(contracts, document);
		}
		for (ProcessDefinition processes : co2system.getProcesses()) {
			format(processes, document);
		}
	}

	def dispatch void format(ProcessDefinition processdefinition, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(processdefinition.getProcess(), document);
	}

	def dispatch void format(ParallelProcesses parallelprocesses, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (DelimitedProcess processes : parallelprocesses.getProcesses()) {
			format(processes, document);
		}
	}

	def dispatch void format(DelimitedProcess delimitedprocess, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(delimitedprocess.getProcess(), document);
	}

	def dispatch void format(Sum sum, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Prefix prefixes : sum.getPrefixes()) {
			format(prefixes, document);
		}
	}

	def dispatch void format(IfThenElse ifthenelse, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(ifthenelse.getExpression(), document);
		format(ifthenelse.getThen(), document);
		format(ifthenelse.getElse(), document);
	}

	def dispatch void format(ThenStatement thenstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(thenstatement.getProcess(), document);
	}

	def dispatch void format(ElseStatement elsestatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(elsestatement.getProcess(), document);
	}

	def dispatch void format(Tau tau, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(tau.getNext(), document);
	}

	def dispatch void format(Tell tell, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(tell.getNext(), document);
		format(tell.getContract(), document);
	}

	def dispatch void format(DoOutput dooutput, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(dooutput.getNext(), document);
		format(dooutput.getValue(), document);
	}

	def dispatch void format(DoInput doinput, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(doinput.getNext(), document);
		format(doinput.getType(), document);
	}

	def dispatch void format(AbstractNextProcess abstractnextprocess, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(abstractnextprocess.getNextProcess(), document);
	}
}
