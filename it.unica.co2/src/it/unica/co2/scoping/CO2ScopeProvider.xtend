/*
 * generated by Xtext
 */
package it.unica.co2.scoping

import com.google.common.base.Predicate
import it.unica.co2.co2.ContractDefinition
import it.unica.co2.co2.ContractReference
import it.unica.co2.co2.DelimitedProcess
import it.unica.co2.co2.DoInput
import it.unica.co2.co2.ProcessDefinition
import it.unica.co2.co2.Recursion
import it.unica.co2.co2.Tell
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.impl.FilteringScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class CO2ScopeProvider extends AbstractDeclarativeScopeProvider {

	/*
	 * Contract reference:
	 * refers to any contract definition except for this
	 */
	def IScope scope_Tell_contractReference(Tell ctx, EReference ref) {
		getIScopeForAllContractDefinition(ctx);
	}
	
	
	/*
	 * FreeName reference
	 */
	def IScope scope_FreeName(EObject ctx, EReference ref) {
		return getDeclaredFreeNames(ctx.eContainer);
	}

	/*
	 * utils: recursively get all freename declarations
	 */
	def dispatch IScope getDeclaredFreeNames(EObject cont) {
		return getDeclaredFreeNames(cont.eContainer);
	}
	
	def dispatch IScope getDeclaredFreeNames(DelimitedProcess proc) {
		return Scopes.scopeFor(
			proc.freeNames
			,
			getDeclaredFreeNames(proc.eContainer) // outer
		);
	}
	
	def dispatch IScope getDeclaredFreeNames(DoInput proc) {
		if (proc.variable==null)
			return getDeclaredFreeNames(proc.eContainer)
		else
			return Scopes.scopeFor(
				newArrayList(proc.variable)
				,
				getDeclaredFreeNames(proc.eContainer) // outer
			);
	}

	def dispatch IScope getDeclaredFreeNames(ProcessDefinition obj) {
		return Scopes.scopeFor(obj.params); // stop recursion
	}
	
	
	
	
	
	def IScope scope_Referrable(ContractReference ctx, EReference ref) {
		
		Scopes.scopeFor(
			scope_ContractDefinition(ctx, ref).allElements.map[x|x.EObjectOrProxy],
			scope_Recursion(ctx, ref)
		)
//		if (ref instanceof Recursion)
//			return scope_Recursion(ctx, ref)
//		else if (ref instanceof ContractDefinition)
//			return scope_ContractDefinition(ctx, ref)
	}

	/*
	 * Recursion reference: 
	 * refers only to recursions defined before ctx but into the same contract definition
	 */
	def IScope scope_Recursion(ContractReference ctx, EReference ref) {
		return definedRecursions(ctx.eContainer);
	}

	/*
	 * utils: recursively bind all rec definition until ContractDefinition is reached
	 */
	def dispatch IScope definedRecursions(EObject cont) {
		return definedRecursions(cont.eContainer);
	}

	def dispatch IScope definedRecursions(Recursion rec) {
		return Scopes.scopeFor(
			newArrayList(rec)
			,
			definedRecursions(rec.eContainer) // outer
		);
	}

	def dispatch IScope definedRecursions(ContractDefinition obj) {
		return IScope.NULLSCOPE; // stop recursion
	}



	/*
	 * Contract reference:
	 * refers to any contract definition except for this
	 */
	def IScope scope_ContractDefinition(ContractReference ctx, EReference ref) {
		var scope = getIScopeForAllContractDefinition(ctx);
		var contractDef = getContractDefinition(ctx)

		getFilteredScope(scope, contractDef)
	}

	def IScope getFilteredScope(IScope scope, ContractDefinition contractDef) {
		new FilteringScope(scope, new Predicate<IEObjectDescription>() {

			override apply(IEObjectDescription input) {
				return input.getEObjectOrProxy() != contractDef;
			}

		});
	}
	
	/**
	 * Get the scope containing all ContractDefinition
	 */
	def IScope getIScopeForAllContractDefinition(EObject ctx){
		var root = EcoreUtil2.getRootContainer(ctx);								// get the root
		var candidates = EcoreUtil2.getAllContentsOfType(root, ContractDefinition);	// get all the ContractDefinition
		return Scopes.scopeFor(candidates);											// return the scope
	}

	/*
	 * utils: recursively find the first ContractDefinition
	 */
	def dispatch ContractDefinition getContractDefinition(EObject obj) {
		return getContractDefinition(obj.eContainer);
	}

	def dispatch ContractDefinition getContractDefinition(ContractDefinition obj) {
		return obj;
	}
}
