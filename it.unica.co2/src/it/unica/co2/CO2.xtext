grammar it.unica.co2.CO2 with org.eclipse.xtext.common.Terminals

generate co2 "http://www.unica.it/co2/CO2"

    
CO2System:	
	((single?="single")? "package" name=QualifiedName)?
//	imports+=Import*
	honesty=HonestyDeclaration?
	contractsAndProcessesDeclaration=ContractsAndProcessesDeclaration
;



Import:
    'import' importedNamespace=QualifiedName ("." "*")?;

QualifiedName:
  ID ('.' ID)*;
    
HonestyDeclaration:
	{HonestyDeclaration} "honesty" (processes+=[ProcessDefinition])+
;

ContractsAndProcessesDeclaration:
	{ContractsAndProcessesDeclaration} (contracts+=ContractDefinition | processes+=ProcessDefinition)*
;

ProcessDefinition:
	{ProcessDefinition} (withoutRestrictions?="process" | "specification") name=ID ("("(params+=Variable ("," params+=Variable)*)?")")? "{" 
		process=(ParallelProcesses)?
	"}"
;

ParallelProcesses:
	processes+=DelimitedProcess  ("|" processes+=DelimitedProcess)*
;

DelimitedProcess:
	("(" (freeNames+=Variable ("," freeNames+=Variable)*)? ")")? process=Process
;



Process:
	EmptyProcess |
	Sum |
	IfThenElse |
	TellProcess |
	TellAndWait |
	TellRetract |
	Send |
	SimpleReceive |
	Receive |
	"(" ParallelProcesses ")"|
	ProcessCall
;

EmptyProcess:
	{EmptyProcess} value="nil"
;

Sum:
	prefixes+=Prefix ("+" prefixes+=Prefix)*
;

SingleSum returns Sum:
	prefixes+=Prefix
;

IfThenElse:
	{IfThenElse}
	'if' if=(Expression|Placeholder)
	"then" then=Next
	(=>'else' else=Next)?
;

ProcessCall:
	reference=[ProcessDefinition] ("("(params+=Expression ("," params+=Expression)*)?")")?
;

Prefix:
	Tau			("." next=Next)? |
	Tell		("." next=Next)? |
	DoOutput	("." next=Next)? |
	DoInput 	("." next=Next)? |
	Ask			("." next=Next)? |
	Retract		("." next=Next)?
;

Next returns Process:
	EmptyProcess |
	SingleSum |
	IfThenElse |
	TellProcess |
	TellAndWait |
	TellRetract |
	Send |
	SimpleReceive |
	Receive |
	"(" ParallelProcesses ")"|
	ProcessCall
;


/* PREFIXES */

Tell:
	"tell" session=[VariableDeclaration]  ("{" contract=Contract? "}" | contractReference=[ContractDefinition]) 
;

Retract:
	"retract" session=[VariableDeclaration]
;

DoOutput:
	"do" session=[VariableDeclaration] actionName=[IntAction] "!" (value=Expression)?
;

DoInput:
	"do" session=[VariableDeclaration] actionName=[ExtAction] "?" (variable=Variable)?
;

Ask:
	"ask" session=[VariableDeclaration] formula=Formula?
;

Tau:
	{Tau} "t"
;

Formula:
	"True" | "(" "True" ")"
;





/* MACROS */

TellProcess:
	"tellAndReturn" session=Session
	("." process=Next)?
;

TellAndWait:
	"tellAndWait" session=Session  
	("." process=Next)?
;

TellRetract:
	"tellRetract" session=Session
	("." process=Next (-> ":" rProcess=Next)?)?
;

Send:
	"send" session=[VariableDeclaration] action=[IntAction] "!" (value=(Expression|Placeholder))? ("." next=Next)?
;

SimpleReceive returns Receive:
	"receive" inputs+=SimpleInput ("+" timeout?="t" ("." tProcess=Next)?)?
;

Receive:
	"receive" "[" 
		(inputs+=Input)+
	"]"
	("+" timeout?="t" ("." tProcess=Next)?)?
;

SimpleInput returns Input:
	session=[VariableDeclaration] (actions+=[ExtAction] "?")+ (variable=Variable)? ("." next=Next)?
;

Input:
	session=[VariableDeclaration] "<-" (actions+=[ExtAction] "?")+ (variable=Variable)? ("." next=Next)?
;



// ======================================================================================
// expression grammar
// ======================================================================================
/*
 * the following part is extracted (and partially modified) from 
 * 		http://xsemantics.sourceforge.net/xsemantics-documentation/Expressions-example.html#Expressions
 * a type-system is also provided
 */
Expression:
    OrExpression;

OrExpression returns Expression:
	AndExpression (({OrExpression.left=current} '||' ) right=AndExpression)*
;

AndExpression returns Expression:
	Comparison (({AndExpression.left=current} '&&') right=Comparison)*
;

Comparison returns Expression:
       Equals
       (({Comparison.left=current} op=('>=' | '<=' | '>' | '<') ) right=Equals)*;

Equals returns Expression:
       Addition 
       (({Equals.left=current} op=("==") ) right=Addition)*;
 
Addition returns Expression:
    Multiplication
    (({Plus.left=current} '+' | {Minus.left=current} '-')
        right=Multiplication)*; 

Multiplication returns Expression:
    Prefixed (({MultiOrDiv.left=current} op=("*"|"/")) right=Prefixed)*;

Prefixed returns Expression:
    {BooleanNegation} =>"!" expression=Atomic | /* right associativity */
    {ArithmeticSigned} =>"-" expression=Atomic | /* right associativity */
    Atomic;

Atomic returns Expression:
    '(' Expression ')' |
    {NumberLiteral} value=INT |
    {StringLiteral} value=STRING |
    {BooleanLiteral} value=('true'|'false') |
    {VariableReference} ref=[VariableDeclaration]
;

Placeholder returns Expression:
	{Placeholder} "*" ":" type=Type
;


VariableDeclaration:
	Variable | Session
;

Variable: 
	name=ID ":" type=Type
;

Session: 
	name=ID
	("{" contract=Contract? "}" | contractReference=[ContractDefinition])
;

Type:
    {IntType} value='int' |
    {StringType} value='string' |
    {BooleanType} value='boolean' |
    {SessionType} value='session'
;




// ======================================================================================
// contract grammar
// ======================================================================================

ContractDefinition:
	{ContractDefinition} "contract" name=ID "{" 
		contract=(Contract)? 
	"}" 
;

Contract:
	IntSum | 
	ExtSum | 
	EmptyContract |
	"(" Contract ")"
;

EmptyContract:
	value="nil"
;

IntSum:
	actions+=IntAction ("(+)" actions+=IntAction)*
;

ExtSum:
	actions+=ExtAction ( "+"  actions+=ExtAction)*
;

NextContract returns Contract:
	SingleIntSum |
	SingleExtSum |
	EmptyContract |
	"(" Contract ")" |
	{ContractReference}	ref=[ContractDefinition]
;

SingleIntSum returns IntSum:
	actions+=IntAction
;

SingleExtSum returns ExtSum:
	actions+=ExtAction
;

IntAction:
	name=ID "!" (type=ActionType)? ("." next=(NextContract))?
;

ExtAction:
	name=ID "?" (type=ActionType)? ("." next=(NextContract))?
;

ActionType: 
	{UnitActionType} value="unit" |
	{IntActionType} value="int" |
	{StringActionType} value="string"
;
