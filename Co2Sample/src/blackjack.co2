
system it.unica.co2.blackjack.BlackJack

honesty P

contract Cp {
	rec Z . (
		hit?. (card! int.Z (+) lose! (+) abort!) + 
		stand? . (win! (+) lose! (+) abort!)
	)
}

contract Cd {
	rec Z . (
		next!. card? int .Z (+) abort!
	)
}

process P {
	(xd:session) (xp:session) tell xd Cd . ask xd . tell xp Cp . Pplay(xp, xd, 0)
}

process Pplay(xp:session, xd:session, np:int) {
	do xp hit? . do xd next! . Pdeck(xp, xd, np)
	+ do xp stand? . Qstand(xp,xd,np,0)
	+ t . do xd abort! . PabortP(xp)
}

process Pdeck(xp:session, xd:session, np:int) {
	do xd card? n:int . Pcard(xp,xd,np+n,n)
	+ t . do xp abort! . PabortD(xd)
}

process Pcard(xp:session, xd:session, np:int, n:int) {
	if np<21
	then do xp card! n . Pplay(xp,xd,np)
	else do xp lose! . PabortD(xd)
}

process Qstand(xp:session, xd:session, np:int, nd:int) {
	if nd<21
	then do xd next! . Qdeck(xp,xd,np,nd)
	else do xp win! . do xd abort!
}

process Qdeck(xp:session, xd:session, np:int, nd:int) {
	do xd card? n:int. Qcard(xp,xd,np,nd)
	+ t . do xp abort!. PabortD(xd)
}

process Qcard(xp:session, xd:session, np:int, nd:int) {
	if nd<np
	then Qstand(xp,xd,np,nd)
	else do xp lose! . PabortD(xd)
}

process PabortP(xp:session) {
	do xp hit?. do xp abort!
	+ do xp stand?. do xp abort!
}

process PabortD(xd:session) {
	do xd abort! 
	| do xd card? n:int. do xd abort!
}