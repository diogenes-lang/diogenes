
contract C {
	a!. ( a1? int + a2?) (+) b!
}


specification P(n:int, x:session) {
	tellAndWait x { a?string . b! int} .
	receive x a? n:string .  
	send x b! n .
	tellAndWait x { a?string . b! int} .
	send x b! n
}


specification P100 {
	tellAndReturn x {a!} . P1(x)
}

specification P0 {
	tellAndReturn x {b!} . P1(x)
}

specification P1 (x:session) {
	send x b! . P1(x)
}

specification P2 (x:session) {
	P2(x)
}

specification Foo {
	tellAndWait x {a! . (a? + b?) (+) b!} .
	switch *:int {
		case 0: send x a! . receive x a? b?
		case 1: send x b!
		case 2: send x b!
		default: send x a!
	}	
}