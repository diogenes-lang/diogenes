/*
 * empty process
 */
 
honesty P2

process p1{ }
process p2{nil}

/*
 * simple tau prefix
 */
process p3{
	t. nil
}

/*
 * delimited process
 */
process p4{
	(x:session) tell x {a!} . do x a!
}

contract C { 
	a!
}

/*
 * ask sample
 */
process p6(x:session) {
	ask x ( True )
}

specification P {
        tellAndWait x {req? string} .
        tellAndWait y {ok! (+) no!} .
        receive x req? v:string .
        if *:boolean 
        then send y ok! 
        else send y no!
    }
    
specification P1 {
      tellAndWait x {req? string} .
      tellRetract y {ok! (+) no!} .
          receive x req? v:string .
          if *:boolean
          then send y ok!
          else send y no!
      : receive x req? v:string
  }
  
specification P2 {
      tellAndWait x {req? string} .
      tellRetract y {ok! (+) no!} .
          receive [
          	x <- req? v:string .
	          if *:boolean
     	      then send y ok!
        	  else send y no!
          ]
          +t . (
          	receive x req? v:string
          	| send y no!
          )
      : receive x req? v:string
  }
  
  
specification A {
	tellAndWait x {a? + b?} .
	receive x a? b?
}