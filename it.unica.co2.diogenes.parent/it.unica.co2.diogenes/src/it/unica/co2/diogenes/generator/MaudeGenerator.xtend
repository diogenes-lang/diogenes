package it.unica.co2.diogenes.generator

import com.google.inject.Inject
import it.unica.co2.diogenes.diogenes.ActionType
import it.unica.co2.diogenes.diogenes.Ask
import it.unica.co2.diogenes.diogenes.CO2System
import it.unica.co2.diogenes.diogenes.ContractDefinition
import it.unica.co2.diogenes.diogenes.ContractReference
import it.unica.co2.diogenes.diogenes.DelimitedProcess
import it.unica.co2.diogenes.diogenes.DiogenesFactory
import it.unica.co2.diogenes.diogenes.DoInput
import it.unica.co2.diogenes.diogenes.DoOutput
import it.unica.co2.diogenes.diogenes.EmptyContract
import it.unica.co2.diogenes.diogenes.EmptyProcess
import it.unica.co2.diogenes.diogenes.Expression
import it.unica.co2.diogenes.diogenes.ExtAction
import it.unica.co2.diogenes.diogenes.ExtSum
import it.unica.co2.diogenes.diogenes.IfThenElse
import it.unica.co2.diogenes.diogenes.IntAction
import it.unica.co2.diogenes.diogenes.IntActionType
import it.unica.co2.diogenes.diogenes.IntSum
import it.unica.co2.diogenes.diogenes.IntType
import it.unica.co2.diogenes.diogenes.ParallelProcesses
import it.unica.co2.diogenes.diogenes.ProcessCall
import it.unica.co2.diogenes.diogenes.ProcessDefinition
import it.unica.co2.diogenes.diogenes.Receive
import it.unica.co2.diogenes.diogenes.Retract
import it.unica.co2.diogenes.diogenes.RetractedProcess
import it.unica.co2.diogenes.diogenes.Send
import it.unica.co2.diogenes.diogenes.Session
import it.unica.co2.diogenes.diogenes.SessionType
import it.unica.co2.diogenes.diogenes.StringActionType
import it.unica.co2.diogenes.diogenes.StringType
import it.unica.co2.diogenes.diogenes.Sum
import it.unica.co2.diogenes.diogenes.SwitchCase
import it.unica.co2.diogenes.diogenes.Tau
import it.unica.co2.diogenes.diogenes.Tell
import it.unica.co2.diogenes.diogenes.TellAndReturn
import it.unica.co2.diogenes.diogenes.TellAndWait
import it.unica.co2.diogenes.diogenes.TimeoutProcess
import it.unica.co2.diogenes.diogenes.UnitActionType
import it.unica.co2.diogenes.diogenes.Variable
import it.unica.co2.diogenes.diogenes.VariableReference
import it.unica.co2.diogenes.xsemantics.DiogenesTypeSystem
import java.io.File
import java.text.SimpleDateFormat
import java.util.Date
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xsemantics.runtime.RuleApplicationTrace
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.naming.IQualifiedNameProvider

class MaudeGenerator extends AbstractIGenerator{
	
	@Inject DiogenesTypeSystem co2TypeSystem
	@Inject extension IQualifiedNameProvider qNameProvider
//	@Inject CO2Parser parser
	
	static final String TAB = "    "

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		var resourceName = resource.URI.lastSegment.replace(".co2","")
		
		for (e : resource.allContents.toIterable.filter(CO2System)) {
			
			var basepath = if (e.^package === null) "" else e.^package.fullyQualifiedName.toString(File.separator) ;
			var outputFilename = basepath+ File.separator+ resourceName+".maude"

			println('''generating «outputFilename»''')
			fsa.generateFile(outputFilename, e.maudeCode)
		}
	}
	


	def dispatch String maudeCode(CO2System _co2System){
		
		var co2System = EcoreUtil.copy(_co2System)	//clone the AST (multiple generators use this)
		
		var moduleName = "PROCESS-MODULE"
		
		var processesToCheck = if (co2System.honesty !== null) co2System.honesty.processes else null
				
		var processes = co2System.contractsAndProcessesDeclaration.processes.filter[p| p.params.length==0].toSet
		var envProcesses = co2System.contractsAndProcessesDeclaration.processes.filter[p| p.params.length!=0].toSet
		var contracts = co2System.contractsAndProcessesDeclaration.contracts.toSet
		
		//fix anonymous tells
		contracts.addAll( co2System.eAllContents.filter(Tell).map[t| t.fixTell("T-CONTR")].toSet )
		contracts.addAll( co2System.eAllContents.filter(TellAndWait).map[t| t.fixTell("TW-CONTR")].toSet )
		contracts.addAll( co2System.eAllContents.filter(TellAndReturn).map[t| t.fixTell("TW-CONTR")].toSet )
			
		var processNames = processes.map[p | p.name].toSet
		var envProcessNames = envProcesses.map[p | p.name].toSet
		var contractNames = contracts.map[c | c.name].toSet
//		var recContractNames = co2System.eAllContents.filter(Recursion).map[c | c.name].toSet
		
		return '''
		***
		*** auto-generated by co2-plugin
		*** creation date: «new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())»
		***
		
		in co2-abs .
		
		mod «moduleName» is
		
		«TAB»including CO2-ABS-SEM .
		«TAB»including CONTR-EQ .
		«TAB»including STRING .
		
		«TAB»subsort String < ActName .
		
		«TAB»ops unit int string : -> BType [ctor] .
		«TAB»ops exp : -> Expression [ctor] .
		
		«TAB»**********************************
		«TAB»***          CONTRACTS         ***
		«TAB»**********************************
		«TAB»op env : -> CEnv .
		«IF contractNames.size>0»
		«TAB»ops «contractNames.join(" ", [x|x+"env"])» : -> Var [ctor] .
		«ENDIF»
		«IF contractNames.size>0»
		«TAB»ops «contractNames.join(" ")» : -> UniContract .
		«ENDIF»
		
		«IF contracts.size>0»
		«TAB»*** env contracts
		«TAB»eq env = (
		«TAB»«TAB»«contracts.join("\n"+TAB+TAB+"&\n"+TAB+TAB, [c| c.maudeCode])»
		«TAB») .
		
		«TAB»*** list of contracts
		«FOR contract : contracts»
		«TAB»eq «contract.name» = defToRec(«contract.name»env, env) .
		«ENDFOR»
		«ENDIF»
		
		«TAB»**********************************
		«TAB»***          PROCESSES         ***
		«TAB»**********************************
		«IF processNames.size>0»
		«TAB»ops «processNames.join(" ")» : -> Process .
		«ENDIF»
		«IF envProcesses.size>0»
		«TAB»ops «envProcessNames.join(" ")» : -> ProcIde .
		«ENDIF»
		
		«TAB»*** list of processes
		«FOR process : processes»    
		«TAB»«process.toMaude(TAB)»
		«ENDFOR»
		
		«IF envProcesses.size>0»
		«TAB»*** env processes
		«TAB»eq env = (
		«TAB»«TAB»«envProcesses.join("\n"+TAB+TAB+"&\n"+TAB+TAB, [p| p.toMaude(TAB+TAB)])»
		«TAB») .
		«ENDIF»
		
		endm
		
		*** honesty
		«IF processesToCheck !== null»
		«FOR processToCheck:processesToCheck»
		red honest(«processToCheck.name» , ['«moduleName»] , unbounded) .
		«ENDFOR»
		«ENDIF»
		
		*** exit the program
		quit
		'''
	}
	
	/*
	 * maude code generation
	 */
	def dispatch String maudeCode(ContractDefinition contractDef) {
		'''«contractDef.name»env =def «IF contractDef.contract !== null»«contractDef.contract.maudeCode»«ELSE»0«ENDIF»'''
	}
	
	def dispatch String maudeCode(IntSum obj) {
		if (obj.actions.length==1)
			obj.actions.get(0).maudeCode
		else
			obj.actions.join("( ", " (+) ", " )", [a | a.maudeCode])
	}
	
	def dispatch String maudeCode(ExtSum obj) {
		if (obj.actions.length==1)
			obj.actions.get(0).maudeCode
		else
			obj.actions.join("( ", " + ", " )", [a | a.maudeCode])
	}
	
	def dispatch String maudeCode(EmptyContract obj) {
		"0"
	}
	
	def dispatch String maudeCode(IntAction obj) {
		'''"«obj.name»" ! «getActionType(obj.type)»«IF obj.next !== null» . «obj.next.maudeCode»«ELSE» . 0«ENDIF»'''
	}
	
	def dispatch String maudeCode(ExtAction obj) {
		'''"«obj.name»" ? «getActionType(obj.type)»«IF obj.next !== null» . «obj.next.maudeCode»«ELSE» . 0«ENDIF»'''
	}
	
	def dispatch String maudeCode(ContractReference obj) {
		obj.ref.name+"env"
	}

	
	
	/*
	 * 
	 * processes
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	def dispatch String toMaude(ProcessDefinition obj, String padLeft) {
		if (obj.process === null) obj.process = DiogenesFactory.eINSTANCE.createParallelProcesses
		
		if (obj.params.size==0)
			'''eq «obj.name» = «IF obj.process !== null»«obj.process.toMaude(padLeft)»«ELSE»0«ENDIF» .'''
		else
			'''«obj.name»«obj.params.join("("," ; ", ")",[
				n | '''«IF n.type instanceof SessionType»"«n.name»"«ELSE»exp«ENDIF»'''
			])» =def «obj.process.toMaude(padLeft)»'''
	}
	
	def dispatch String toMaude(ParallelProcesses obj, String padLeft) {
		if (obj.processes.size==0)
			return "0"
		
		var pad = padLeft;
		var sb = new StringBuilder()
		
		if (obj.processes.size>1) {
			sb.append("\n").append(pad).append("(")
			pad=pad.addPad
		}
		
		var i=0;
		for (p : obj.processes) {
			
			if (i++>0) {
				sb.append(" | ");
			}
			
			if (obj.processes.size()>1) {
				sb.append("\n").append(pad)
			}
			
			sb.append(p.toMaude(pad));
		}
	
		if (obj.processes.size>1) {
			pad=pad.removePad
			sb.append("\n").append(pad).append(")")
		}
		
		return sb.toString
	}
	
	def dispatch String toMaude(DelimitedProcess obj, String padLeft) {
		if (obj.freeNames.length>0)
			'''(«obj.freeNames.join(" ", [x| '''("«x.name»")'''])» «obj.process.toMaude(padLeft)»)'''
		else
			obj.process.toMaude(padLeft)
	}
	
	def dispatch String toMaude(Sum obj, String padLeft) {
		var pad = padLeft;
		var sb = new StringBuilder()
		
		if (obj.prefixes.size>1) {
			sb.append("\n").append(pad).append("(")
			pad=pad.addPad
		}
		
		var i=0;
		for (p : obj.prefixes) {
			
			if (i++>0) {
				sb.append(" + ");
			}
			
			if (obj.prefixes.size()>1) {
				sb.append("\n").append(pad)
			}
			
			sb.append(p.toMaude(pad));
		}
	
		if (obj.prefixes.size>1) {
			pad=pad.removePad
			sb.append("\n").append(pad).append(")")
		}
		
		return sb.toString
	}
	
	def dispatch String toMaude(EmptyProcess obj, String padLeft) {
		"0"
	}
	
	def dispatch String toMaude(IfThenElse obj, String padLeft) {
		obj.^else = obj.^else?: DiogenesFactory.eINSTANCE.createEmptyProcess

		var pad = padLeft;
		'''
		
		«pad»(
		«pad=pad.addPad»
		«pad»if «obj.^if.toMaude(pad)» 
		«pad»then «obj.then.toMaude(pad)» 
		«pad»else «obj.^else.toMaude(pad)» 
		«pad.removePad») '''
	}
	
	/*
	 * prefixes
	 */
	def dispatch String toMaude(Tau obj, String padLeft) {
		if (obj.next === null) obj.next = DiogenesFactory.eINSTANCE.createEmptyProcess
		'''t . «obj.next.toMaude(padLeft)»'''
	}
	
	def dispatch String toMaude(Tell obj, String padLeft) {
		if (obj.next === null) obj.next = DiogenesFactory.eINSTANCE.createEmptyProcess
		'''tell "«obj.session.name»" «obj.contractReference.name» . «obj.next.toMaude(padLeft)»'''
	}
	
	def dispatch String toMaude(DoInput obj, String padLeft) {
		if (obj.next === null) obj.next = DiogenesFactory.eINSTANCE.createEmptyProcess
		'''do "«obj.session.name»" "«obj.actionName.name»" ? «getFreeNameType(obj.variable)» . «obj.next.toMaude(padLeft)»'''
	}
	
	def dispatch String toMaude(DoOutput obj, String padLeft) {
		if (obj.next === null) obj.next = DiogenesFactory.eINSTANCE.createEmptyProcess
		'''do "«obj.session.name»" "«obj.actionName.name»" ! «getExpressionType(obj.value)» . «obj.next.toMaude(padLeft)»'''
	}
	
	def dispatch String toMaude(Ask obj, String padLeft) {
		if (obj.next === null) obj.next = DiogenesFactory.eINSTANCE.createEmptyProcess
		'''ask "«obj.session.name»" True . «obj.next.toMaude(padLeft)»'''
	}
	
	def dispatch String toMaude(Retract obj, String padLeft) {
		if (obj.next === null) obj.next = DiogenesFactory.eINSTANCE.createEmptyProcess
		'''retract "«obj.session.name»" . «obj.next.toMaude(padLeft)»'''
	}
	
	def dispatch String toMaude(ProcessCall obj, String padLeft) {
		'''«obj.reference.name»«IF obj.params.length!=0»«obj.params.join("("," ; ", ")",[n|'''«n.toMaude(padLeft)»'''])»«ENDIF»'''
	}
	
	def dispatch String toMaude(Expression exp, String padLeft) {
		if (exp instanceof VariableReference) {
			var ref = (exp as VariableReference).ref
			
			if (
				ref instanceof Session ||
				(ref instanceof Variable && (ref as Variable).type instanceof SessionType)
			)
				return '''"«ref.name»"'''
		}

		return "exp"
	}
	
	
	
	
	def dispatch String toMaude(TellAndReturn obj, String padLeft) {
		obj.process = obj.process ?: DiogenesFactory.eINSTANCE.createEmptyProcess
		var pad = padLeft;
		'''
		«"\n"+pad»(
		«pad=pad.addPad»
		«pad»("«obj.session.name»") tell "«obj.session.name»" «obj.session.contractReference.name» . «obj.process.toMaude(pad)»
		«pad.removePad»)'''
	}
	
	def dispatch String toMaude(TellAndWait obj, String padLeft) {
		obj.process = obj.process ?: DiogenesFactory.eINSTANCE.createEmptyProcess
		var pad = padLeft;
		'''
		«IF obj.isTimeout»
		«"\n"+pad»(
		«pad=pad.addPad»
		«pad»("«obj.session.name»") tell "«obj.session.name»" «obj.session.contractReference.name» . (
		«pad=pad.addPad»
		«pad»ask "«obj.session.name»" True . «obj.process.toMaude(pad)»
		«pad»+ retract "«obj.session.name»" . «obj.timeoutValue.TProcess.toMaude(pad)»
		«pad=pad.removePad»)
		«pad.removePad»)
		«ELSE»
		«"\n"+pad»(
		«pad=pad.addPad»
		«pad»("«obj.session.name»") tell "«obj.session.name»" «obj.session.contractReference.name» . ask "«obj.session.name»" True . «obj.process.toMaude(pad)»
		«pad.removePad»)
		«ENDIF»
		'''
	}
	
	def dispatch String toMaude(Send obj, String padLeft) {
		obj.next = obj.next ?: DiogenesFactory.eINSTANCE.createEmptyProcess
		'''do "«obj.session.name»" "«obj.action.name»" ! «getExpressionType(obj.value)» . «obj.next.toMaude(padLeft)»'''
	}
	
	def dispatch String toMaude(Receive obj, String padLeft) {
		
		var pad = padLeft;
		var sb = new StringBuilder()
		
		if (obj.inputs.size>1 || 
			(obj.inputs.size==1 && obj.inputs.get(0).actions.size>1) 
			|| obj.isTimeout
		) {
			sb.append("\n").append(pad).append("(")		// increase the pad
			pad=pad.addPad
		}
		
		var i=0;

		for (input : obj.inputs) {

			for (action : input.actions) {
					
				if (obj.inputs.size>1 || 
					(obj.inputs.size==1 && obj.inputs.get(0).actions.size>1) 
					|| obj.isTimeout
				) {
					sb.append("\n").append(pad)			// add a \n
				}
	
				if (i++>0) {
					sb.append("+ ");
				}
				
				input.next = input.next?: DiogenesFactory.eINSTANCE.createEmptyProcess
				sb.append('''do "«input.session.name»" "«action.name»" ? «getFreeNameType(input.variable)» . «input.next.toMaude(pad)»''');
			}
		}

		// timeout
		if (obj.isTimeout) {
			obj.timeoutValue.TProcess = obj.timeoutValue.TProcess ?: DiogenesFactory.eINSTANCE.createEmptyProcess
			sb.append("\n").append(pad)
			sb.append('''+ t . «obj.timeoutValue.TProcess.toMaude(pad)»''')
		}
	

		if (obj.inputs.size>1 || 
			(obj.inputs.size==1 && obj.inputs.get(0).actions.size>1) 
			|| obj.isTimeout
		) {
			pad=pad.removePad
			sb.append("\n").append(pad).append(")")		// decrease the pad
		}

		return sb.toString
		
	}
	
	def dispatch String toMaude(SwitchCase obj, String padLeft) {
		
		var pad = padLeft;
		var sb = new StringBuilder()
		
		if (obj.cases.size>1 || obj.^default) {
			sb.append("\n").append(pad).append("(")		// increase the pad
			pad=pad.addPad
		}
		
		var i=0;

		for (_case : obj.cases) {
			
			if (obj.cases.size>1 || obj.^default) {
				sb.append("\n").append(pad)			// add a \n
			}

			if (i++>0) {
				sb.append("+ ");
			}
								
			sb.append(_case.caseProc.toMaude(pad))
		}

		// default
		if (obj.^default) {
			sb.append("\n").append(pad)
			sb.append('''+ «obj.defaultProc.toMaude(pad)»''')
		}

		if (obj.cases.size>1 || obj.^default) {
			pad=pad.removePad
			sb.append("\n").append(pad).append(")")		// decrease the pad
		}

		return sb.toString


	}
	
	def dispatch String toMaude(TimeoutProcess p, String padLeft) {
		p.TProcess.toMaude(padLeft)
	}
	
	def dispatch String toMaude(RetractedProcess p, String padLeft) {
		p.process.toMaude(padLeft)
	}
	
	
	
	def String getActionType(ActionType type) {
		if (type === null || type instanceof UnitActionType) return "unit"
		else if (type instanceof IntActionType) return "int"
		else if (type instanceof StringActionType) return "string"
	}
	
	def String getExpressionType(Expression exp) {
		
		if (exp === null)
			return "unit"
		
		val typeTrace = new RuleApplicationTrace()
		val result = co2TypeSystem.type(null, typeTrace, exp)
        
        val type = result.value
        
		if (type instanceof IntType) return "int"
		else if (type instanceof StringType) return "string"
		//other types are not permitted by the semantic checker
	}
	
	def String getFreeNameType(Variable variable) {
		if (variable === null) return "unit"
		else if (variable.type instanceof IntType) return "int"
		else if (variable.type instanceof StringType) return "string"
	}
	
	
	def String addPad(String pad) {
		pad+TAB
	}
	
	def String removePad(String pad) {
		pad.replaceFirst(TAB,"")
	}
	
}